{"version":3,"sources":["App.tsx","index.tsx"],"names":["result","UAParser","getResult","startBenchmarking","window","gpuSortGenerate","getBenchmarkText","isBenchmarking","App","state","output","componentDidMount","stats","Stats","showPanel","document","body","appendChild","dom","requestAnimationFrame","animate","begin","end","setInterval","setState","benchmarking","gl","getWebGLContext","debugInfo","getExtension","getParameter","UNMASKED_RENDERER_WEBGL","style","textAlign","backgroundColor","minHeight","color","display","flexDirection","alignItems","fontSize","type","height","width","margin","paddingTop","paddingBottom","paddingLeft","paddingRight","onClick","fontFamily","browser","name","major","os","version","this","getWebGLRenderer","whiteSpace","React","Component","ReactDOM","render","getElementById"],"mappings":"gUAOIA,GADW,IAAIC,YACCC,YAEdC,EAAqBC,OAAeC,gBAAgBF,kBACpDG,EAAoBF,OAAeC,gBAAgBC,iBACnDC,EAAkBH,OAAeC,gBAAgBE,eAOlCC,E,2MACnBC,MAAQ,CAAEC,OAAQJ,K,EAElBK,kBAAoB,WAClB,IAAMC,EAAQ,IAAIC,IAClBD,EAAME,UAAU,GAChBC,SAASC,KAAKC,YAAYL,EAAMM,KAMhCC,uBALgB,SAAVC,IACJR,EAAMS,QACNT,EAAMU,MACNH,sBAAsBC,MAGxBG,aAAY,kBAAM,EAAKC,SAAS,CAAEd,OAAQJ,IAAoBmB,aAAclB,QAAqB,M,kFAIjG,IAAMmB,EAAKC,4BACLC,EAAYF,EAAGG,aAAa,6BAClC,MACM,GAAN,OADKD,EACKF,EAAGI,aAAaF,EAAUG,yBADVH,K,+BAIlB,IAAD,OACP,OACE,yBAAKI,MAAO,CAAEC,UAAW,WACvB,yBACED,MAAO,CACLE,gBAAiB,UACjBC,UAAW,QACXC,MAAO,QACPC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,SAAU,SAIL,EAAK/B,MAAMgB,aAmBP,kBAAC,IAAD,CAAcgB,KAAM,QAASL,MAAO,QAASM,OAAQ,GAAIC,MAAO,KAjBrE,4BACEX,MAAO,CACLY,OAAQ,OACRC,WAAY,MACZC,cAAe,MACfC,YAAa,OACbC,aAAc,OACdN,OAAQ,QAEVO,QAAS,WACP9C,MAVJ,mBAoBN,yBAAK6B,MAAO,CAAEkB,WAAY,cACvB,UAAGlD,EAAOmD,QAAQC,KAAlB,YAA0BpD,EAAOmD,QAAQE,MAAzC,gBACIrD,EAAOsD,GAAGF,KADd,YACsBpD,EAAOsD,GAAGC,QADhC,gBAEIC,KAAKC,qBAEZ,yBACEzB,MAAO,CACLC,UAAW,OACXyB,WAAY,WACZR,WAAY,YACZJ,cAAe,SAGhBU,KAAK/C,MAAMC,c,GAzESiD,IAAMC,WCbvCC,IAASC,OAAO,kBAAC,EAAD,MAAS/C,SAASgD,eAAe,W","file":"static/js/main.0e206d45.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactLoading from \"react-loading\";\nimport { default as Stats } from \"stats.js\";\nimport { UAParser } from \"ua-parser-js\";\nimport { getWebGLContext } from \"gpu-compute\";\n\nconst parser = new UAParser();\nvar result = parser.getResult();\n\nconst startBenchmarking = (window as any).gpuSortGenerate.startBenchmarking as () => void;\nconst getBenchmarkText = (window as any).gpuSortGenerate.getBenchmarkText as () => string;\nconst isBenchmarking = (window as any).gpuSortGenerate.isBenchmarking as () => boolean;\n\ninterface AppState {\n  output: string;\n  benchmarking: boolean;\n}\n\nexport default class App extends React.Component<{}, AppState> {\n  state = { output: getBenchmarkText() } as AppState;\n\n  componentDidMount = () => {\n    const stats = new Stats();\n    stats.showPanel(0);\n    document.body.appendChild(stats.dom);\n    const animate = () => {\n      stats.begin();\n      stats.end();\n      requestAnimationFrame(animate);\n    };\n    requestAnimationFrame(animate);\n    setInterval(() => this.setState({ output: getBenchmarkText(), benchmarking: isBenchmarking() }), 100);\n  };\n\n  getWebGLRenderer() {\n    const gl = getWebGLContext();\n    const debugInfo = gl.getExtension(\"WEBGL_debug_renderer_info\");\n    if (!debugInfo) return `${debugInfo}`;\n    return `${gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL)}`;\n  }\n\n  render() {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <div\n          style={{\n            backgroundColor: \"#282c34\",\n            minHeight: \"100vh\",\n            color: \"white\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            fontSize: \"16px\"\n          }}\n        >\n          {(() => {\n            if (!this.state.benchmarking) {\n              return (\n                <button\n                  style={{\n                    margin: \"20px\",\n                    paddingTop: \"5px\",\n                    paddingBottom: \"5px\",\n                    paddingLeft: \"15px\",\n                    paddingRight: \"15px\",\n                    height: \"30px\"\n                  }}\n                  onClick={() => {\n                    startBenchmarking();\n                  }}\n                >\n                  Start Benchmark\n                </button>\n              );\n            } else {\n              return <ReactLoading type={\"cylon\"} color={\"white\"} height={70} width={70} />;\n            }\n          })()}\n          <div style={{ fontFamily: \"monospace\" }}>\n            {`${result.browser.name} ${result.browser.major}, ` +\n              `${result.os.name} ${result.os.version}, ` +\n              `${this.getWebGLRenderer()}`}\n          </div>\n          <div\n            style={{\n              textAlign: \"left\",\n              whiteSpace: \"pre-wrap\",\n              fontFamily: \"monospace\",\n              paddingBottom: \"30px\"\n            }}\n          >\n            {this.state.output}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}